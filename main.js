/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var obsidian = require('obsidian');
var fs = require('fs');
var path = require('path');
var child_process = require('child_process');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                        return e[k];
                    }
                });
            }
        });
    }
    n['default'] = e;
    return Object.freeze(n);
}

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var fs__namespace = /*#__PURE__*/_interopNamespace(fs);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var path__namespace = /*#__PURE__*/_interopNamespace(path);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var lib = createCommonjsModule(function (module, exports) {
var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lookpath = void 0;
var fs = __importStar(fs__default['default']);
var path = __importStar(path__default['default']);
var isWindows = /^win/i.test(process.platform);
/**
 * Sometimes, people want to look for local executable files
 * which are specified with either relative or absolute file path.
 * @private
 * @param cmd
 * @return {string} An absolute path of given command, or undefined.
 */
var isFilepath = function (cmd) {
    return cmd.includes(path.sep) ? path.resolve(cmd) : undefined;
};
/**
 * Just promisifies "fs.access"
 * @private
 * @param {string} fpath An absolute file path with an applicable extension appended.
 * @return {Promise<string>} Resolves absolute path or empty string.
 */
var access = function (fpath) {
    return new Promise(function (resolve) { return fs.access(fpath, fs.constants.X_OK, function (err) { return resolve(err ? undefined : fpath); }); });
};
/**
 * Resolves if the given file is executable or not, regarding "PATHEXT" to be applied.
 * @private
 * @param {string} abspath A file path to be checked.
 * @return {Promise<string>} Resolves the absolute file path just checked, or undefined.
 */
var isExecutable = function (abspath) { return __awaiter(void 0, void 0, void 0, function () {
    var exts, bins;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                exts = (process.env.PATHEXT || '').split(path.delimiter).concat('');
                return [4 /*yield*/, Promise.all(exts.map(function (ext) { return access(abspath + ext); }))];
            case 1:
                bins = _a.sent();
                return [2 /*return*/, bins.find(function (bin) { return !!bin; })];
        }
    });
}); };
/**
 * Returns a list of directories on which the target command should be looked for.
 * @private
 * @param {string[]} opt.include Will be added to "PATH" env.
 * @param {string[]} opt.exclude Will be filtered from "PATH" env.
 * @return {string[]} Directories to dig into.
 */
var getDirsToWalkThrough = function (opt) {
    var envname = isWindows ? 'Path' : 'PATH';
    return (process.env[envname] || '').split(path.delimiter).concat(opt.include || []).filter(function (p) { return !(opt.exclude || []).includes(p); });
};
/**
 * Returns async promise with absolute file path of given command,
 * and resolves with undefined if the command not found.
 * @param {string} command Command name to look for.
 * @param {LookPathOption} opt Options for lookpath.
 * @return {Promise<string|undefined>} Resolves absolute file path, or undefined if not found.
 */
function lookpath(command, opt) {
    if (opt === void 0) { opt = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var directpath, dirs, bins;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    directpath = isFilepath(command);
                    if (directpath)
                        return [2 /*return*/, isExecutable(directpath)];
                    dirs = getDirsToWalkThrough(opt);
                    return [4 /*yield*/, Promise.all(dirs.map(function (dir) { return isExecutable(path.join(dir, command)); }))];
                case 1:
                    bins = _a.sent();
                    return [2 /*return*/, bins.find(function (bin) { return !!bin; })];
            }
        });
    });
}
exports.lookpath = lookpath;
});

// Derived from https://github.com/eshinn/node-pandoc
// TODO: is Pandoc markdown the ideal default markdown type?
const inputExtensions = ['md', 'docx', 'csv', 'html', 'tex', 'odt'];
// List of [pretty name, pandoc format name, file extension]
const outputFormats = [
    ['AsciiDoc (adoc)', 'asciidoc', 'adoc'],
    ['Word Document (docx)', 'docx', 'docx'],
    ['Pandoc Markdown', 'markdown', 'md'],
    ['HTML', 'html', 'html'],
    ['LaTeX', 'latex', 'tex'],
    ['OpenDocument (odt)', 'odt', 'odt'],
    ['Plain Text (txt)', 'plain', 'txt'],
    ['PowerPoint (pptx)', 'pptx', 'pptx'],
    ['ePub', 'epub', 'epub'],
    ['PDF (via LaTeX)', 'pdf', 'pdf'],
    ['Jupyter Notebook', 'ipynb', 'ipynb'],
];
// Note: extraParams is a list of strings like ['-o', 'file.md']
const pandoc = (input, output, extraParams) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => {
        const stdin = input.file === 'STDIN';
        const stdout = output.file === 'STDOUT';
        let pandoc;
        let result = '';
        let error = '';
        const fileBaseName = (file) => path__namespace.basename(file, path__namespace.extname(file));
        // Construct the Pandoc arguments list
        let args = [];
        // The title is needed for ePub and standalone HTML formats
        const title = input.title ? input.title : fileBaseName(input.file);
        args.push('--metadata', `title=${title}`);
        if (input.format) {
            args.push('--from');
            args.push(input.format);
        }
        if (output.format) {
            args.push('--to');
            args.push(output.format);
        }
        if (output.format === 'html' || output.file.endsWith('.html'))
            args.push('-s');
        if (!stdout) {
            args.push('-o');
            args.push(output.file);
        }
        else {
            args.push('-o');
            args.push('-');
        }
        if (!stdin) {
            args.push(input.file);
        }
        if (extraParams) {
            args.push(...extraParams);
        }
        function start() {
            // Spawn a Pandoc child process
            // Assumes Pandoc is installed and that the arguments are valid
            // The arguments aren't sanitised, so be careful!
            pandoc = child_process.spawn('pandoc', args);
            if (stdin) {
                pandoc.stdin.write(input.contents);
                pandoc.stdin.end();
            }
            // Handlers
            pandoc.stdout.on('data', (data) => {
                result += data;
            });
            pandoc.stderr.on('data', (err) => {
                error += err;
            });
            pandoc.stdout.on('end', () => {
                // TODO: need a way to handle warnings vs errors here and in the UI
                if (error.length) {
                    reject(new Error(error));
                }
                else {
                    resolve(stdout ? result : null);
                }
            });
        }
        if (input.file === 'STDIN') {
            start();
        }
        else {
            // Check if the input file exists, and then start
            fs.stat(input.file, (err, stats) => {
                if (stats.isFile())
                    start();
                else
                    reject(new Error('Input file does not exist'));
            });
        }
    });
});

var fontFace = `
@font-face /* 0 */ {
  font-family: MJXZERO;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Zero.woff") format("woff");
}

@font-face /* 1 */ {
  font-family: MJXTEX;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regular.woff") format("woff");
}

@font-face /* 2 */ {
  font-family: MJXTEX-B;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Main-Bold.woff") format("woff");
}

@font-face /* 3 */ {
  font-family: MJXTEX-I;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Math-Italic.woff") format("woff");
}

@font-face /* 4 */ {
  font-family: MJXTEX-MI;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Main-Italic.woff") format("woff");
}

@font-face /* 5 */ {
  font-family: MJXTEX-BI;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Math-BoldItalic.woff") format("woff");
}

@font-face /* 6 */ {
  font-family: MJXTEX-S1;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size1-Regular.woff") format("woff");
}

@font-face /* 7 */ {
  font-family: MJXTEX-S2;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size2-Regular.woff") format("woff");
}

@font-face /* 8 */ {
  font-family: MJXTEX-S3;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size3-Regular.woff") format("woff");
}

@font-face /* 9 */ {
  font-family: MJXTEX-S4;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size4-Regular.woff") format("woff");
}

@font-face /* 10 */ {
  font-family: MJXTEX-A;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_AMS-Regular.woff") format("woff");
}

@font-face /* 11 */ {
  font-family: MJXTEX-C;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Calligraphic-Regular.woff") format("woff");
}

@font-face /* 12 */ {
  font-family: MJXTEX-CB;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Calligraphic-Bold.woff") format("woff");
}

@font-face /* 13 */ {
  font-family: MJXTEX-FR;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Fraktur-Regular.woff") format("woff");
}

@font-face /* 14 */ {
  font-family: MJXTEX-FRB;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Fraktur-Bold.woff") format("woff");
}

@font-face /* 15 */ {
  font-family: MJXTEX-SS;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_SansSerif-Regular.woff") format("woff");
}

@font-face /* 16 */ {
  font-family: MJXTEX-SSB;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_SansSerif-Bold.woff") format("woff");
}

@font-face /* 17 */ {
  font-family: MJXTEX-SSI;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_SansSerif-Italic.woff") format("woff");
}

@font-face /* 18 */ {
  font-family: MJXTEX-SC;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Script-Regular.woff") format("woff");
}

@font-face /* 19 */ {
  font-family: MJXTEX-T;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Typewriter-Regular.woff") format("woff");
}

@font-face /* 20 */ {
  font-family: MJXTEX-V;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Vector-Regular.woff") format("woff");
}

@font-face /* 21 */ {
  font-family: MJXTEX-VB;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Vector-Bold.woff") format("woff");
}`;

var appcss = `
:root {
  --default-font: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Microsoft YaHei Light", sans-serif;
  --font-monospace: 'Source Code Pro', monospace;
  --background-primary: #ffffff;
  --background-modifier-border: #ddd;
  --text-accent: #705dcf;
  --text-accent-hover: #7a6ae6;
  --text-normal: #2e3338;
  --background-secondary: #f2f3f5;
  --background-secondary-alt: #e3e5e8;
  --text-muted: #888888;
}
pre, code {
  font-family: var(--font-monospace);
}
h1, h2, h3, h4, h5, h6 {
  font-weight: 800;
}
a {
  color: var(--text-accent);
  outline: none;
}
a:hover {
  color: var(--text-accent-hover);
}
audio {
  outline: none;
}
hr {
  border: none;
  border-top: 1px solid;
  border-color: var(--background-modifier-border);
  margin: 26px 0;
}
* {
  box-sizing: border-box;
}
body {
  text-rendering: optimizeLegibility;
  font-family: var(--default-font);
  line-height: 1.5em;
  font-size: 16px;
  background-color: var(--background-primary);
  color: var(--text-normal);
}
ul ul, ol ul, ol ul, ul ol {
  list-style-type: disc;
}



  /* PrismJS 1.20.0
https://prismjs.com/download.html#themes=prism&languages=markup+css+clike+javascript+abap+abnf+actionscript+ada+al+antlr4+apacheconf+apl+applescript+aql+arduino+arff+asciidoc+asm6502+aspnet+autohotkey+autoit+bash+basic+batch+bbcode+bison+bnf+brainfuck+brightscript+bro+c+concurnas+csharp+cpp+cil+coffeescript+cmake+clojure+crystal+csp+css-extras+d+dart+dax+diff+django+dns-zone-file+docker+ebnf+eiffel+ejs+elixir+elm+etlua+erb+erlang+excel-formula+fsharp+factor+firestore-security-rules+flow+fortran+ftl+gcode+gdscript+gedcom+gherkin+git+glsl+gml+go+graphql+groovy+haml+handlebars+haskell+haxe+hcl+hlsl+http+hpkp+hsts+ichigojam+icon+iecst+inform7+ini+io+j+java+javadoc+javadoclike+javastacktrace+jolie+jq+jsdoc+js-extras+js-templates+json+jsonp+json5+julia+keyman+kotlin+latex+latte+less+lilypond+liquid+lisp+livescript+llvm+lolcode+lua+makefile+markdown+markup-templating+matlab+mel+mizar+monkey+moonscript+n1ql+n4js+nand2tetris-hdl+nasm+neon+nginx+nim+nix+nsis+objectivec+ocaml+opencl+oz+parigp+parser+pascal+pascaligo+pcaxis+peoplecode+perl+php+phpdoc+php-extras+plsql+powerquery+powershell+processing+prolog+properties+protobuf+pug+puppet+pure+purebasic+python+q+qml+qore+r+racket+jsx+tsx+renpy+reason+regex+rest+rip+roboconf+robotframework+ruby+rust+sas+sass+scss+scala+scheme+shell-session+smalltalk+smarty+solidity+solution-file+soy+sparql+splunk-spl+sqf+sql+stylus+swift+tap+tcl+textile+toml+tt2+turtle+twig+typescript+t4-cs+t4-vb+t4-templating+unrealscript+vala+vbnet+velocity+verilog+vhdl+vim+visual-basic+warpscript+wasm+wiki+xeora+xml-doc+xojo+xquery+yaml+zig */
  /**
	 * prism.js default theme for JavaScript, CSS and HTML
	 * Based on dabblet (http://dabblet.com)
	 * @author Lea Verou
	 */
  /* Code blocks */
  /* Inline code */
}
code[class*="language-"],
pre[class*="language-"] {
  color: black;
  background: none;
  text-shadow: 0 1px white;
  font-family: var(--font-monospace);
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.5;
  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;
  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}
pre[class*="language-"]::-moz-selection,
pre[class*="language-"] ::-moz-selection,
code[class*="language-"]::-moz-selection,
code[class*="language-"] ::-moz-selection {
  text-shadow: none;
  background: #b3d4fc;
}
pre[class*="language-"]::selection,
pre[class*="language-"] ::selection,
code[class*="language-"]::selection,
code[class*="language-"] ::selection {
  text-shadow: none;
  background: #b3d4fc;
}
@media print {
  code[class*="language-"],
  pre[class*="language-"] {
    text-shadow: none;
  }
}
pre[class*="language-"] {
  padding: 1em;
  margin: 0.5em 0;
  overflow: auto;
}
:not(pre) > code[class*="language-"],
pre[class*="language-"] {
  background: #f5f2f0;
}
:not(pre) > code[class*="language-"] {
  padding: 0.1em;
  border-radius: 0.3em;
  white-space: normal;
}
.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: slategray;
}
.token.punctuation {
  color: #999;
}
.token.namespace {
  opacity: 0.7;
}
.token.property,
.token.tag,
.token.boolean,
.token.number,
.token.constant,
.token.symbol,
.token.deleted {
  color: #905;
}
.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
  color: #690;
}
.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string {
  color: #9a6e3a;
  background: hsla(0, 0%, 100%, 0.5);
}
.token.atrule,
.token.attr-value,
.token.keyword {
  color: #07a;
}
.token.function,
.token.class-name {
  color: #DD4A68;
}
.token.regex,
.token.important,
.token.variable {
  color: #e90;
}
.token.important,
.token.bold {
  font-weight: bold;
}
.token.italic {
  font-style: italic;
}
.token.entity {
  cursor: help;
}

`;

const DEFAULT_SETTINGS = {
    showCLICommands: false,
};
class PandocPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.programs = ['pandoc', 'latex', 'node'];
        this.features = {};
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Loading Pandoc plugin');
            yield this.loadSettings();
            // Check if Pandoc, LaTeX, etc. are installed and in the PATH
            yield this.createBinaryMap();
            // Register all of the command palette entries
            this.registerCommands();
            this.addSettingTab(new PandocPluginSettingTab(this.app, this));
        });
    }
    registerCommands() {
        for (let [prettyName, pandocFormat, extension] of outputFormats) {
            if (pandocFormat === 'latex' && !this.features['latex'])
                continue;
            const name = pandocFormat === 'html' ?
                'Export as HTML (without Pandoc)' : 'Export as ' + prettyName;
            this.addCommand({
                id: 'pandoc-export-' + pandocFormat, name,
                checkCallback: (checking) => {
                    let leaf = this.app.workspace.activeLeaf;
                    if (!leaf)
                        return false;
                    if (!this.features.pandoc && pandocFormat !== 'html')
                        return false;
                    if (!this.currentFileCanBeExported())
                        return false;
                    if (!checking) {
                        this.startPandocExport(this.getCurrentFile(), extension);
                    }
                    return true;
                }
            });
        }
    }
    vaultBasePath() {
        return this.app.vault.adapter.getBasePath();
    }
    getCurrentFile() {
        const fileData = this.app.workspace.getActiveFile();
        if (!fileData)
            return null;
        const { basename, extension } = fileData;
        const filename = `${basename}.${extension}`;
        return path__namespace.join(this.vaultBasePath(), filename);
    }
    currentFileCanBeExported() {
        // Note: this is super inefficient
        // This can probably also be cached each time the file changes instead
        //  of being called once per format per open of the command palette
        const file = this.getCurrentFile();
        if (!file)
            return false;
        for (const ext of inputExtensions) {
            if (file.endsWith(ext))
                return true;
        }
        return false;
    }
    createBinaryMap() {
        return __awaiter(this, void 0, void 0, function* () {
            // Note: lookpath scans the entire PATH once, this is not efficient
            // We're also not coalescing promises via Promise.all
            for (const binary of this.programs) {
                this.features[binary] = yield lib.lookpath(binary);
            }
        });
    }
    startPandocExport(inputFile, outputFormat) {
        return __awaiter(this, void 0, void 0, function* () {
            console.log(`Pandoc plugin: converting ${inputFile} to ${outputFormat}`);
            console.log(this.app); // TODO: remove
            // Instead of using Pandoc to process the raw Markdown, we use Obsidian's
            // internal markdown renderer, and process the HTML it generates instead.
            // This allows us to trivially deal with Obsidian specific Markdown syntax.
            try {
                // Extract HTML
                const wrapper = document.createElement('div');
                wrapper.style.display = 'hidden';
                document.body.appendChild(wrapper);
                const markdown = this.app.workspace.activeLeaf.view.data;
                yield obsidian.MarkdownRenderer.renderMarkdown(markdown, wrapper, this.fileBaseName(this.getCurrentFile()), {});
                // Fix <span src="image.png">
                for (let span of Array.from(wrapper.querySelectorAll('span'))) {
                    let src = span.getAttribute('src');
                    if (src && (src.endsWith('.png') || src.endsWith('.jpg'))) {
                        span.innerHTML = '';
                        span.outerHTML = span.outerHTML.replace(/span/g, 'img');
                    }
                }
                // Fix <a href="markdown_file_without_extension">, etc.
                const prefix = 'app://obsidian.md/';
                for (let a of Array.from(wrapper.querySelectorAll('a'))) {
                    let href = a.href.startsWith(prefix) ? path__namespace.join(this.vaultBasePath(), a.href.substring(prefix.length)) : a.href;
                    if (path__namespace.extname(href) === '') {
                        const dir = path__namespace.dirname(href);
                        const base = path__namespace.basename(href);
                        const hashIndex = base.indexOf('#');
                        if (hashIndex !== -1) {
                            href = path__namespace.join(dir, base.substring(0, hashIndex) + '.md' + base.substring(hashIndex));
                        }
                        else {
                            href = path__namespace.join(dir, base + '.md');
                        }
                    }
                    a.href = href;
                }
                const renderedMarkdown = wrapper.innerHTML;
                document.body.removeChild(wrapper);
                // Process HTML
                const title = this.fileBaseName(inputFile);
                const outputFile = this.replaceFileExtension(inputFile, outputFormat);
                const html = this.standaloneHTML(this.processHTML(renderedMarkdown), title);
                // Spawn Pandoc / write to HTML file
                if (outputFormat === 'html') {
                    yield fs__namespace.promises.writeFile(outputFile, html);
                }
                else {
                    const AST = yield this.pandocGetASTFromSTDIN(html, 'html');
                    console.log(AST);
                    const newAST = this.pandocFilterAST(AST);
                    yield this.pandocPutAST(outputFile, newAST, title);
                }
                // Wrap up
                fs__namespace.stat(outputFile, (err, stats) => {
                    if (stats.isFile())
                        new obsidian.Notice('Successfully exported via Pandoc to ' + outputFile);
                    else {
                        new obsidian.Notice('Pandoc export silently failed');
                        console.error('Pandoc silently failed');
                    }
                });
            }
            catch (e) {
                new obsidian.Notice('Pandoc error: ' + e.toString());
                console.error(e);
            }
        });
    }
    processHTML(html) {
        // Replace `app://local/uri` links with plain `uri` links
        const regex = /"app:\/\/local\/([\w\-\.!~*'\(\)%]+)(\?\d+)?"/m;
        let match = html.match(regex);
        while (match) {
            // match = [entire match, encoded uri capture group, unused capture group, index: start of match]
            // Replaces "app://local/uri" with "uri" (quotes included in both cases)
            html = html.substring(0, match.index) + '"' + window.decodeURIComponent(match[1]) + '"' + html.substring(match.index + match[0].length);
            match = html.match(regex);
        }
        return html;
    }
    standaloneHTML(html, title) {
        // Wraps an HTML fragment in a proper document structure
        //  and injects the page's CSS
        let css = appcss;
        css += ' ' + Array.from(document.querySelectorAll('style')).map(s => s.innerHTML).join(' ');
        // TODO: inject MathJax fonts without slow page load times?
        if (html.indexOf('jax="CHTML"') !== -1)
            css += ' ' + fontFace;
        return `<!doctype html>\n` +
            `<html>\n` +
            `	<head>\n` +
            `		<title>${title}</title>\n` +
            `		<meta charset='utf-8'/>\n` +
            `		<style>\n${css}\n</style>\n` +
            `	</head>\n` +
            `	<body>\n` +
            `${html}\n` +
            `	</body>\n` +
            `</html>`;
    }
    fileBaseName(file) {
        return path__namespace.basename(file, path__namespace.extname(file));
    }
    pandocFilterAST(ast) {
        return ast;
    }
    replaceFileExtension(file, ext) {
        // Source: https://stackoverflow.com/a/5953384/4642943
        let pos = file.lastIndexOf('.');
        return file.substr(0, pos < 0 ? file.length : pos) + '.' + ext;
    }
    pandocGetASTFromSTDIN(contents, format) {
        return __awaiter(this, void 0, void 0, function* () {
            const json = yield pandoc({ file: 'STDIN', contents, format }, { file: 'STDOUT', format: 'json' });
            return JSON.parse(json);
        });
    }
    pandocPutAST(file, json, title) {
        return __awaiter(this, void 0, void 0, function* () {
            const serialised = JSON.stringify(json);
            return yield pandoc({ file: 'STDIN', format: 'json', contents: serialised, title }, { file });
        });
    }
    onunload() {
        console.log('Unloading Pandoc plugin');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}
class PandocPluginSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.errorMessages = {
            pandoc: "Pandoc is not installed or accessible on your PATH. This plugin's functionality will be limited.",
            latex: "LaTeX is not installed or accessible on your PATH. Please install it if you want PDF exports via LaTeX.",
            node: "Node.js is not installed or accessible on your PATH. Please install it if you want Pandoc CLI commands to be shown.",
        };
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h3', { text: 'Pandoc Plugin' });
        const createError = (text) => containerEl.createEl('p', { cls: 'pandoc-plugin-error', text });
        for (const binary of this.plugin.programs) {
            const path = this.plugin.features[binary];
            if (path === undefined) {
                createError(this.errorMessages[binary]);
            }
        }
        new obsidian.Setting(containerEl)
            .setName("Show CLI commands (not implemented)")
            .setDesc("For Pandoc's command line interface")
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.showCLICommands)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.showCLICommands = value;
            yield this.plugin.saveSettings();
        })));
    }
}

module.exports = PandocPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
