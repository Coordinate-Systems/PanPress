/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/

'use strict';

var fs = require('fs');
var path = require('path');
var obsidian = require('obsidian');
var child_process = require('child_process');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                        return e[k];
                    }
                });
            }
        });
    }
    n['default'] = e;
    return Object.freeze(n);
}

var fs__default = /*#__PURE__*/_interopDefaultLegacy(fs);
var fs__namespace = /*#__PURE__*/_interopNamespace(fs);
var path__default = /*#__PURE__*/_interopDefaultLegacy(path);
var path__namespace = /*#__PURE__*/_interopNamespace(path);

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __awaiter(thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

function createCommonjsModule(fn, basedir, module) {
	return module = {
		path: basedir,
		exports: {},
		require: function (path, base) {
			return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);
		}
	}, fn(module, module.exports), module.exports;
}

function commonjsRequire () {
	throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');
}

var lib = createCommonjsModule(function (module, exports) {
var __createBinding = (commonjsGlobal && commonjsGlobal.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (commonjsGlobal && commonjsGlobal.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (commonjsGlobal && commonjsGlobal.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (commonjsGlobal && commonjsGlobal.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (commonjsGlobal && commonjsGlobal.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.lookpath = void 0;
var fs = __importStar(fs__default['default']);
var path = __importStar(path__default['default']);
var isWindows = /^win/i.test(process.platform);
/**
 * Sometimes, people want to look for local executable files
 * which are specified with either relative or absolute file path.
 * @private
 * @param cmd
 * @return {string} An absolute path of given command, or undefined.
 */
var isFilepath = function (cmd) {
    return cmd.includes(path.sep) ? path.resolve(cmd) : undefined;
};
/**
 * Just promisifies "fs.access"
 * @private
 * @param {string} fpath An absolute file path with an applicable extension appended.
 * @return {Promise<string>} Resolves absolute path or empty string.
 */
var access = function (fpath) {
    return new Promise(function (resolve) { return fs.access(fpath, fs.constants.X_OK, function (err) { return resolve(err ? undefined : fpath); }); });
};
/**
 * Resolves if the given file is executable or not, regarding "PATHEXT" to be applied.
 * @private
 * @param {string} abspath A file path to be checked.
 * @return {Promise<string>} Resolves the absolute file path just checked, or undefined.
 */
var isExecutable = function (abspath) { return __awaiter(void 0, void 0, void 0, function () {
    var exts, bins;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                exts = (process.env.PATHEXT || '').split(path.delimiter).concat('');
                return [4 /*yield*/, Promise.all(exts.map(function (ext) { return access(abspath + ext); }))];
            case 1:
                bins = _a.sent();
                return [2 /*return*/, bins.find(function (bin) { return !!bin; })];
        }
    });
}); };
/**
 * Returns a list of directories on which the target command should be looked for.
 * @private
 * @param {string[]} opt.include Will be added to "PATH" env.
 * @param {string[]} opt.exclude Will be filtered from "PATH" env.
 * @return {string[]} Directories to dig into.
 */
var getDirsToWalkThrough = function (opt) {
    var envname = isWindows ? 'Path' : 'PATH';
    return (process.env[envname] || '').split(path.delimiter).concat(opt.include || []).filter(function (p) { return !(opt.exclude || []).includes(p); });
};
/**
 * Returns async promise with absolute file path of given command,
 * and resolves with undefined if the command not found.
 * @param {string} command Command name to look for.
 * @param {LookPathOption} opt Options for lookpath.
 * @return {Promise<string|undefined>} Resolves absolute file path, or undefined if not found.
 */
function lookpath(command, opt) {
    if (opt === void 0) { opt = {}; }
    return __awaiter(this, void 0, void 0, function () {
        var directpath, dirs, bins;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    directpath = isFilepath(command);
                    if (directpath)
                        return [2 /*return*/, isExecutable(directpath)];
                    dirs = getDirsToWalkThrough(opt);
                    return [4 /*yield*/, Promise.all(dirs.map(function (dir) { return isExecutable(path.join(dir, command)); }))];
                case 1:
                    bins = _a.sent();
                    return [2 /*return*/, bins.find(function (bin) { return !!bin; })];
            }
        });
    });
}
exports.lookpath = lookpath;
});

/*
 * pandoc.ts
 *
 * This module handles spawning Pandoc, passing it arguments, and streaming
 * to/from STDIN/STDOUT buffers if desired.
 *
 * Loosely based on https://github.com/eshinn/node-pandoc (MIT licensed)
 *
 */
const inputExtensions = ['md', 'docx', 'csv', 'html', 'tex', 'odt'];
// List of [pretty name, pandoc format name, file extension, shortened pretty name]
const outputFormats = [
    ['AsciiDoc (adoc)', 'asciidoc', 'adoc', 'AsciiDoc'],
    ['Word Document (docx)', 'docx', 'docx', 'Word'],
    ['Pandoc Markdown', 'markdown', 'pandoc.md', 'markdown'],
    ['HTML (without Pandoc)', 'html', 'html', 'HTML'],
    ['LaTeX', 'latex', 'tex', 'LaTeX'],
    ['OpenDocument (odt)', 'odt', 'odt', 'OpenDocument'],
    ['Plain Text (txt)', 'plain', 'txt', 'plain text'],
    ['PowerPoint (pptx)', 'pptx', 'pptx', 'PowerPoint'],
    ['ePub', 'epub', 'epub', 'ePub'],
    ['PDF (via LaTeX)', 'pdf', 'pdf', 'PDF'],
    ['Jupyter Notebook', 'ipynb', 'ipynb', 'Jupyter'],
    ['Reveal.js Slides', 'revealjs', 'reveal.html', 'Reveal.js'],
    ['Beamer Slides', 'beamer', 'beamer.tex', 'Beamer'],
    ['reStructured Text (RST)', 'rst', 'rst', 'RST'],
];
function needsLaTeX(format) {
    return format !== 'latex' && format !== 'pdf';
}
function needsStandaloneFlag(output) {
    return output.file.endsWith('html')
        || output.format === 'html'
        || output.format === 'revealjs'
        || output.format === 'latex'
        || output.format === 'beamer';
}
// Note: extraParams is a list of strings like ['-o', 'file.md']
// This rejects if the file doesn't get created
const pandoc = (input, output, extraParams) => __awaiter(void 0, void 0, void 0, function* () {
    return new Promise((resolve, reject) => __awaiter(void 0, void 0, void 0, function* () {
        const stdin = input.file === 'STDIN';
        const stdout = output.file === 'STDOUT';
        let pandoc;
        let result = '';
        let error = '';
        const fileBaseName = (file) => path__namespace.basename(file, path__namespace.extname(file));
        // Construct the Pandoc arguments list
        let args = [];
        // The title is needed for ePub and standalone HTML formats
        const title = input.title || fileBaseName(input.file);
        args.push('--metadata', `title=${title}`);
        if (input.format) {
            args.push('--from');
            args.push(input.format);
        }
        if (output.format) {
            args.push('--to');
            args.push(output.format);
        }
        if (needsStandaloneFlag(output))
            args.push('-s');
        if (!stdout) {
            args.push('-o');
            args.push(output.file);
        }
        else {
            args.push('-o');
            args.push('-');
        }
        // // Support Unicode in the PDF output if XeLaTeX is installed
        if (output.format === 'pdf' && (yield lib.lookpath('xelatex')))
            args.push('--pdf-engine=xelatex');
        if (!stdin) {
            args.push(input.file);
        }
        if (extraParams) {
            args.push(...extraParams);
        }
        function start() {
            // Spawn a Pandoc child process
            // Assumes Pandoc is installed and that the arguments are valid
            // The arguments aren't sanitised, so be careful!
            const env = Object.assign(process.env);
            if (input.pdflatex) {
                // Workaround for Windows having different PATH delimiters
                // to *every other operating system in existence*
                // *sigh*
                if (process.platform === 'win32')
                    env.PATH += ";";
                else
                    env.PATH += ":";
                env.PATH += path__namespace.dirname(input.pdflatex);
            }
            pandoc = child_process.spawn(input.pandoc || 'pandoc', args, { env: process.env });
            if (stdin) {
                const contents = input.contents;
                /*
                // TODO: we need to strip characters like the footnote sign but not other language characters
                const contents = needsUnicodeStripped(output)
                    ? input.contents.replace(/[^\x00-\x7F]/g, "")
                    : input.contents;
                */
                pandoc.stdin.write(contents);
                pandoc.stdin.end();
            }
            // Handlers
            pandoc.stdout.on('data', (data) => {
                result += data;
            });
            pandoc.stderr.on('data', (err) => {
                error += err;
            });
            pandoc.stdout.on('end', () => {
                const value = {
                    result, error,
                    command: 'pandoc ' + args.join(' ')
                };
                if (output.file !== 'STDOUT') {
                    fs__namespace.stat(output.file, (err, stats) => {
                        // Call resolve if the file exists, reject otherwise
                        if (stats && stats.isFile()) {
                            resolve(value);
                        }
                        else {
                            reject(error);
                        }
                    });
                }
                else {
                    // Call resolve iff there is a nonempty result
                    (result.length ? resolve : reject)(value);
                    if (result.length) {
                        resolve(value);
                    }
                    else {
                        reject(error);
                    }
                }
            });
        }
        if (input.file === 'STDIN') {
            start();
        }
        else {
            // Check if the input file exists, and then start
            fs.stat(input.file, (err, stats) => {
                if (stats.isFile())
                    start();
                else
                    reject(new Error('Input file does not exist'));
            });
        }
    }));
});

var mathJaxFontCSS = `
@font-face /* 0 */ {
  font-family: MJXZERO;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Zero.woff") format("woff");
}

@font-face /* 1 */ {
  font-family: MJXTEX;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Main-Regular.woff") format("woff");
}

@font-face /* 2 */ {
  font-family: MJXTEX-B;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Main-Bold.woff") format("woff");
}

@font-face /* 3 */ {
  font-family: MJXTEX-I;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Math-Italic.woff") format("woff");
}

@font-face /* 4 */ {
  font-family: MJXTEX-MI;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Main-Italic.woff") format("woff");
}

@font-face /* 5 */ {
  font-family: MJXTEX-BI;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Math-BoldItalic.woff") format("woff");
}

@font-face /* 6 */ {
  font-family: MJXTEX-S1;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size1-Regular.woff") format("woff");
}

@font-face /* 7 */ {
  font-family: MJXTEX-S2;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size2-Regular.woff") format("woff");
}

@font-face /* 8 */ {
  font-family: MJXTEX-S3;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size3-Regular.woff") format("woff");
}

@font-face /* 9 */ {
  font-family: MJXTEX-S4;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Size4-Regular.woff") format("woff");
}

@font-face /* 10 */ {
  font-family: MJXTEX-A;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_AMS-Regular.woff") format("woff");
}

@font-face /* 11 */ {
  font-family: MJXTEX-C;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Calligraphic-Regular.woff") format("woff");
}

@font-face /* 12 */ {
  font-family: MJXTEX-CB;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Calligraphic-Bold.woff") format("woff");
}

@font-face /* 13 */ {
  font-family: MJXTEX-FR;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Fraktur-Regular.woff") format("woff");
}

@font-face /* 14 */ {
  font-family: MJXTEX-FRB;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Fraktur-Bold.woff") format("woff");
}

@font-face /* 15 */ {
  font-family: MJXTEX-SS;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_SansSerif-Regular.woff") format("woff");
}

@font-face /* 16 */ {
  font-family: MJXTEX-SSB;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_SansSerif-Bold.woff") format("woff");
}

@font-face /* 17 */ {
  font-family: MJXTEX-SSI;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_SansSerif-Italic.woff") format("woff");
}

@font-face /* 18 */ {
  font-family: MJXTEX-SC;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Script-Regular.woff") format("woff");
}

@font-face /* 19 */ {
  font-family: MJXTEX-T;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Typewriter-Regular.woff") format("woff");
}

@font-face /* 20 */ {
  font-family: MJXTEX-V;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Vector-Regular.woff") format("woff");
}

@font-face /* 21 */ {
  font-family: MJXTEX-VB;
  src: url("http://cdn.mathjax.org/mathjax/latest/fonts/HTML-CSS/TeX/woff/MathJax_Vector-Bold.woff") format("woff");
}`;

// This CSS is composed of Prism.css and a small amount of light theme Obsidian CSS,
// which is copyrighted by the Obsidian developers.
// I've received permission from @Licat on Discord to include this snippet in the plugin
// and HTML exports from it.
// See https://discord.com/channels/686053708261228577/707816848615407697/830630553883377690
const variables = `
:root {
  --default-font: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Microsoft YaHei Light", sans-serif;
  --font-monospace: 'Source Code Pro', monospace;
  --background-primary: #ffffff;
  --background-modifier-border: #ddd;
  --text-accent: #705dcf;
  --text-accent-hover: #7a6ae6;
  --text-normal: #2e3338;
  --background-secondary: #f2f3f5;
  --background-secondary-alt: #e3e5e8;
  --text-muted: #888888;
}`;
var appCSS = `
:root {
  --default-font: 'Inter', -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Microsoft YaHei Light", sans-serif;
  --font-monospace: 'Source Code Pro', monospace;
  --background-primary: #ffffff;
  --background-modifier-border: #ddd;
  --text-accent: #705dcf;
  --text-accent-hover: #7a6ae6;
  --text-normal: #2e3338;
  --background-secondary: #f2f3f5;
  --background-secondary-alt: #e3e5e8;
  --text-muted: #888888;
}
pre, code {
  font-family: var(--font-monospace);
}
h1, h2, h3, h4, h5, h6 {
  font-weight: 800;
}
a {
  color: var(--text-accent);
  outline: none;
}
a:hover {
  color: var(--text-accent-hover);
}
audio {
  outline: none;
}
hr {
  border: none;
  border-top: 1px solid;
  border-color: var(--background-modifier-border);
  margin: 26px 0;
}
* {
  box-sizing: border-box;
}
body {
  text-rendering: optimizeLegibility;
  font-family: var(--default-font);
  line-height: 1.5em;
  font-size: 16px;
  background-color: var(--background-primary);
  color: var(--text-normal);
}
ul ul, ol ul, ol ul, ul ol {
  list-style-type: disc;
}



  /* PrismJS 1.20.0
https://prismjs.com/download.html#themes=prism&languages=markup+css+clike+javascript+abap+abnf+actionscript+ada+al+antlr4+apacheconf+apl+applescript+aql+arduino+arff+asciidoc+asm6502+aspnet+autohotkey+autoit+bash+basic+batch+bbcode+bison+bnf+brainfuck+brightscript+bro+c+concurnas+csharp+cpp+cil+coffeescript+cmake+clojure+crystal+csp+css-extras+d+dart+dax+diff+django+dns-zone-file+docker+ebnf+eiffel+ejs+elixir+elm+etlua+erb+erlang+excel-formula+fsharp+factor+firestore-security-rules+flow+fortran+ftl+gcode+gdscript+gedcom+gherkin+git+glsl+gml+go+graphql+groovy+haml+handlebars+haskell+haxe+hcl+hlsl+http+hpkp+hsts+ichigojam+icon+iecst+inform7+ini+io+j+java+javadoc+javadoclike+javastacktrace+jolie+jq+jsdoc+js-extras+js-templates+json+jsonp+json5+julia+keyman+kotlin+latex+latte+less+lilypond+liquid+lisp+livescript+llvm+lolcode+lua+makefile+markdown+markup-templating+matlab+mel+mizar+monkey+moonscript+n1ql+n4js+nand2tetris-hdl+nasm+neon+nginx+nim+nix+nsis+objectivec+ocaml+opencl+oz+parigp+parser+pascal+pascaligo+pcaxis+peoplecode+perl+php+phpdoc+php-extras+plsql+powerquery+powershell+processing+prolog+properties+protobuf+pug+puppet+pure+purebasic+python+q+qml+qore+r+racket+jsx+tsx+renpy+reason+regex+rest+rip+roboconf+robotframework+ruby+rust+sas+sass+scss+scala+scheme+shell-session+smalltalk+smarty+solidity+solution-file+soy+sparql+splunk-spl+sqf+sql+stylus+swift+tap+tcl+textile+toml+tt2+turtle+twig+typescript+t4-cs+t4-vb+t4-templating+unrealscript+vala+vbnet+velocity+verilog+vhdl+vim+visual-basic+warpscript+wasm+wiki+xeora+xml-doc+xojo+xquery+yaml+zig */
  /**
     * prism.js default theme for JavaScript, CSS and HTML
     * Based on dabblet (http://dabblet.com)
     * @author Lea Verou
     */
  /* Code blocks */
  /* Inline code */
code[class*="language-"],
pre[class*="language-"] {
  color: black;
  background: none;
  text-shadow: 0 1px white;
  font-family: var(--font-monospace);
  text-align: left;
  white-space: pre;
  word-spacing: normal;
  word-break: normal;
  word-wrap: normal;
  line-height: 1.5;
  -moz-tab-size: 4;
  -o-tab-size: 4;
  tab-size: 4;
  -webkit-hyphens: none;
  -moz-hyphens: none;
  -ms-hyphens: none;
  hyphens: none;
}
pre[class*="language-"]::-moz-selection,
pre[class*="language-"] ::-moz-selection,
code[class*="language-"]::-moz-selection,
code[class*="language-"] ::-moz-selection {
  text-shadow: none;
  background: #b3d4fc;
}
pre[class*="language-"]::selection,
pre[class*="language-"] ::selection,
code[class*="language-"]::selection,
code[class*="language-"] ::selection {
  text-shadow: none;
  background: #b3d4fc;
}
@media print {
  code[class*="language-"],
  pre[class*="language-"] {
    text-shadow: none;
  }
}
pre[class*="language-"] {
  padding: 1em;
  margin: 0.5em 0;
  overflow: auto;
}
:not(pre) > code[class*="language-"],
pre[class*="language-"] {
  background: #f5f2f0;
}
:not(pre) > code[class*="language-"] {
  padding: 0.1em;
  border-radius: 0.3em;
  white-space: normal;
}
.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
  color: slategray;
}
.token.punctuation {
  color: #999;
}
.token.namespace {
  opacity: 0.7;
}
.token.property,
.token.tag,
.token.boolean,
.token.number,
.token.constant,
.token.symbol,
.token.deleted {
  color: #905;
}
.token.selector,
.token.attr-name,
.token.string,
.token.char,
.token.builtin,
.token.inserted {
  color: #690;
}
.token.operator,
.token.entity,
.token.url,
.language-css .token.string,
.style .token.string {
  color: #9a6e3a;
  background: hsla(0, 0%, 100%, 0.5);
}
.token.atrule,
.token.attr-value,
.token.keyword {
  color: #07a;
}
.token.function,
.token.class-name {
  color: #DD4A68;
}
.token.regex,
.token.important,
.token.variable {
  color: #e90;
}
.token.important,
.token.bold {
  font-weight: bold;
}
.token.italic {
  font-style: italic;
}
.token.entity {
  cursor: help;
}

`;

/*
 * renderer.ts
 *
 * This module exposes a function that turns an Obsidian markdown string into
 * an HTML string with as many inconsistencies ironed out as possible
 *
 */
// Note: parentFiles is for internal use (to prevent recursively embedded notes)
// inputFile must be an absolute file path
function render(settings, markdown, inputFile, vaultBasePath, outputFormat, parentFiles = []) {
    return __awaiter(this, void 0, void 0, function* () {
        // Use Obsidian's markdown renderer to render to a hidden <div>
        const wrapper = document.createElement('div');
        wrapper.style.display = 'hidden';
        document.body.appendChild(wrapper);
        yield obsidian.MarkdownRenderer.renderMarkdown(markdown, wrapper, path__namespace.dirname(inputFile), {});
        // Post-process the HTML in-place
        yield postProcessRenderedHTML(settings, inputFile, wrapper, vaultBasePath, outputFormat, parentFiles);
        const renderedMarkdown = wrapper.innerHTML;
        document.body.removeChild(wrapper);
        // Make the HTML a standalone document - inject CSS, a <title>, etc.
        let html;
        const title = getTitle(markdown, inputFile);
        if (parentFiles.length === 0) {
            html = yield standaloneHTML(settings, renderedMarkdown, title, vaultBasePath);
        }
        else {
            // Embedded notes don't need CSS injected
            html = renderedMarkdown;
        }
        return { html, title };
    });
}
// Takes any file path like '/home/oliver/zettelkasten/Obsidian.md' and
// takes the base name, in this case 'Obsidian'
function fileBaseName(file) {
    return path__namespace.basename(file, path__namespace.extname(file));
}
// Chooses a suitable title for the document
// Uses the YAML frontmatter title field, falling back on the file base name
function getTitle(markdown, filename) {
    // Try to extract a YAML frontmatter title using highly inefficient
    // string matching. Performance isn't too problematic as this is called
    // rarely, and I think it's still O(n), just with a large constant
    // TODO: can I use obsidian.parseFrontMatter* instead of doing it manually?
    markdown = markdown.trim();
    if (markdown.startsWith('---')) {
        const trailing = markdown.substring(3);
        const frontmatter = trailing.substring(0, trailing.indexOf('---')).trim();
        const lines = frontmatter.split('\n').map(x => x.trim());
        for (const line of lines) {
            if (line.startsWith('title:')) {
                // Assume the title goes to the end of the line, and that
                // quotes are not intended to be in the filename
                // This certainly won't be YAML spec compliant
                let title = line.substring('title:'.length).trim();
                title.replace(/"/g, '');
                return title;
            }
        }
    }
    // Fall back on file name
    return fileBaseName(filename);
}
function getCustomCSS(settings, vaultBasePath) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!settings.customCSSFile)
            return;
        let file = settings.customCSSFile;
        let buffer = null;
        // Try absolute path
        try {
            let test = yield fs__namespace.promises.readFile(file);
            buffer = test;
        }
        catch (e) { }
        // Try relative path
        try {
            let test = yield fs__namespace.promises.readFile(path__namespace.join(vaultBasePath, file));
            buffer = test;
        }
        catch (e) { }
        if (!buffer) {
            new obsidian.Notice('Failed to load custom Pandoc CSS file: ' + settings.customCSSFile);
            return '';
        }
        else {
            return buffer.toString();
        }
    });
}
function getDesiredCSS(settings, html, vaultBasePath) {
    return __awaiter(this, void 0, void 0, function* () {
        let css = '';
        // Inject light theme app CSS if the user wants it
        if (settings.injectAppCSS)
            css = appCSS;
        // Inject plugin CSS if the user wants it
        if (settings.injectPluginCSS)
            css += ' ' + Array.from(document.querySelectorAll('style'))
                .map(s => s.innerHTML).join(' ');
        // Inject MathJax font CSS if needed (at this stage embedded notes are
        //  already embedded so this covers all cases)
        if (settings.injectMathJaxCSS && html.indexOf('jax="CHTML"') !== -1)
            css += ' ' + mathJaxFontCSS;
        // Inject custom local CSS file if it exists
        css += yield getCustomCSS(settings, vaultBasePath);
        return css;
    });
}
function standaloneHTML(settings, html, title, vaultBasePath) {
    return __awaiter(this, void 0, void 0, function* () {
        // Wraps an HTML fragment in a proper document structure
        //  and injects the page's CSS
        const css = yield getDesiredCSS(settings, html, vaultBasePath);
        return `<!doctype html>\n` +
            `<html>\n` +
            `    <head>\n` +
            `        <title>${title}</title>\n` +
            `        <meta charset='utf-8'/>\n` +
            `        <style>\n${css}\n</style>\n` +
            `    </head>\n` +
            `    <body>\n` +
            `${html}\n` +
            `    </body>\n` +
            `</html>`;
    });
}
function postProcessRenderedHTML(settings, inputFile, wrapper, vaultBasePath, outputFormat, parentFiles = []) {
    return __awaiter(this, void 0, void 0, function* () {
        const dirname = path__namespace.dirname(inputFile);
        // Fix <span src="image.png">
        for (let span of Array.from(wrapper.querySelectorAll('span[src$=".png"], span[src$=".jpg"], span[src$=".gif"], span[src$=".jpeg"]'))) {
            span.innerHTML = '';
            span.outerHTML = span.outerHTML.replace(/span/g, 'img');
        }
        // Fix <span class='internal-embed' src='another_note_without_extension'>
        for (let span of Array.from(wrapper.querySelectorAll('span.internal-embed'))) {
            let src = span.getAttribute('src');
            if (src) {
                const file = path__namespace.join(dirname, src + '.md');
                try {
                    if (parentFiles.indexOf(file) !== -1) {
                        // We've got an infinite recursion on our hands
                        // We should replace the embed with a wikilink
                        // Then our link processing happens afterwards
                        span.outerHTML = `<a href="${src + '.md'}">${span.innerHTML}</a>`;
                    }
                    else {
                        const markdown = (yield fs__namespace.promises.readFile(file)).toString();
                        const newParentFiles = [...parentFiles];
                        newParentFiles.push(inputFile);
                        const html = yield render(settings, markdown, file, vaultBasePath, outputFormat, newParentFiles);
                        span.outerHTML = html.html;
                    }
                }
                catch (e) {
                    // Continue if it can't be loaded
                    console.error("Pandoc plugin encountered an error trying to load an embedded note: " + e.toString());
                }
            }
        }
        // Fix <a href="app://obsidian.md/markdown_file_without_extension">
        const prefix = 'app://obsidian.md/';
        for (let a of Array.from(wrapper.querySelectorAll('a'))) {
            if (!a.href.startsWith(prefix))
                continue;
            // This is now an internal link (wikilink)
            if (settings.linkStrippingBehaviour === 'link' || outputFormat === 'html') {
                let href = path__namespace.join(dirname, a.href.substring(prefix.length));
                if (settings.addExtensionsToInternalLinks.length && a.href.startsWith(prefix)) {
                    if (path__namespace.extname(href) === '') {
                        const dir = path__namespace.dirname(href);
                        const base = path__namespace.basename(href);
                        // Be careful to turn [[note#heading]] into note.extension#heading not note#heading.extension
                        const hashIndex = base.indexOf('#');
                        if (hashIndex !== -1) {
                            href = path__namespace.join(dir, base.substring(0, hashIndex) + '.' + settings.addExtensionsToInternalLinks + base.substring(hashIndex));
                        }
                        else {
                            href = path__namespace.join(dir, base + '.' + settings.addExtensionsToInternalLinks);
                        }
                    }
                }
                a.href = href;
            }
            else if (settings.linkStrippingBehaviour === 'strip') {
                a.outerHTML = '';
            }
            else if (settings.linkStrippingBehaviour === 'text') {
                a.outerHTML = a.innerText;
            }
        }
        // Fix <img src="app://obsidian.md/image.png">
        // Note: this will throw errors when Obsidian tries to load images with a (now invalid) src
        // These errors can be safely ignored
        // Note: we leave HTML links intact (so they're relative image paths) and don't touch the src
        //  if we're processing an embedded note to avoid double-handling (and thus mangling) the src
        if (outputFormat !== 'html' && parentFiles.length === 0) {
            for (let img of Array.from(wrapper.querySelectorAll('img'))) {
                img.src = img.src.startsWith(prefix) ? path__namespace.join(dirname, img.src.substring(prefix.length)) : img.src;
            }
        }
        // Remove YAML frontmatter from the output if desired
        if (!settings.displayYAMLFrontmatter) {
            Array.from(wrapper.querySelectorAll('.frontmatter, .frontmatter-container'))
                .forEach(el => wrapper.removeChild(el));
        }
        // Fix Mermaid.js diagrams
        for (let svg of Array.from(wrapper.querySelectorAll('svg'))) {
            // Insert the CSS variables as a CSS string (even if the user doesn't want CSS injected; Mermaid diagrams look terrible otherwise)
            // TODO: it injects light theme CSS, do we want this?
            let style = svg.querySelector('style') || svg.appendChild(document.createElement('style'));
            style.innerHTML += variables;
            // Inject a marker (arrowhead) for Mermaid.js diagrams and use it at the end of paths
            svg.innerHTML += `"<marker id="mermaid_arrowhead" viewBox="0 0 10 10" refX="9" refY="5" markerUnits="strokeWidth" markerWidth="8" markerHeight="6" orient="auto"><path d="M 0 0 L 10 5 L 0 10 z" class="arrowheadPath" style="stroke-width: 1; stroke-dasharray: 1, 0;"></path></marker>"`;
            svg.innerHTML = svg.innerHTML.replace(/app:\/\/obsidian\.md\/index\.html#arrowhead\d*/g, "#mermaid_arrowhead");
            // If the output isn't HTML, replace the SVG with a PNG for compatibility
            if (outputFormat !== 'html') {
                const scale = settings.highDPIDiagrams ? 2 : 1;
                const png = yield convertSVGToPNG(svg, scale);
                svg.parentNode.replaceChild(png, svg);
            }
        }
    });
}
// This creates an unmounted <img> element with a transparent background PNG data URL as the src
// The scale parameter is used for high DPI renders (the <img> element size is the same,
//  but the underlying PNG is higher resolution)
function convertSVGToPNG(svg, scale = 1) {
    const canvas = document.createElement('canvas');
    canvas.width = Math.ceil(svg.width.baseVal.value * scale);
    canvas.height = Math.ceil(svg.height.baseVal.value * scale);
    const ctx = canvas.getContext('2d');
    var svgImg = new Image;
    svgImg.src = "data:image/svg+xml;base64," + btoa(svg.outerHTML);
    return new Promise((resolve, reject) => {
        svgImg.onload = () => {
            ctx.drawImage(svgImg, 0, 0, canvas.width, canvas.height);
            const pngData = canvas.toDataURL('png');
            const img = document.createElement('img');
            img.src = pngData;
            img.width = Math.ceil(svg.width.baseVal.value);
            img.height = Math.ceil(svg.height.baseVal.value);
            resolve(img);
        };
    });
}

/*
 * settings.ts
 *
 * Creates the settings UI
 *
 */
class PandocPluginSettingTab extends obsidian.PluginSettingTab {
    constructor(app, plugin) {
        super(app, plugin);
        this.errorMessages = {
            pandoc: "Pandoc is not installed or accessible on your PATH. This plugin's functionality will be limited.",
            latex: "LaTeX is not installed or accessible on your PATH. Please install it if you want PDF exports via LaTeX.",
        };
        this.plugin = plugin;
    }
    display() {
        let { containerEl } = this;
        containerEl.empty();
        containerEl.createEl('h3', { text: 'Pandoc Plugin' });
        const createError = (text) => containerEl.createEl('p', { cls: 'pandoc-plugin-error', text });
        for (const binary in this.plugin.features) {
            const path = this.plugin.features[binary];
            if (path === undefined) {
                createError(this.errorMessages[binary]);
            }
        }
        new obsidian.Setting(containerEl)
            .setName("Custom CSS file for HTML output")
            .setDesc("This local CSS file will be read and injected into HTML exports. Use an absolute path or a path relative to the vault.")
            .addText(text => text
            .setPlaceholder('File name')
            .setValue(this.plugin.settings.customCSSFile)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            if (!value.length)
                this.plugin.settings.customCSSFile = null;
            else
                this.plugin.settings.customCSSFile = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Inject app/plugin CSS (HTML output only)")
            .setDesc("This applies app and plugin CSS to HTML exports, but the files become bigger.")
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.injectPluginCSS)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.injectPluginCSS
                = this.plugin.settings.injectAppCSS
                    = this.plugin.settings.injectMathJaxCSS
                        = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Internal link processing")
            .setDesc("This controls how [[wiki-links]] are formatted. Doesn't affect HTML output.")
            .addDropdown(dropdown => dropdown
            .addOptions({
            "text": "Turn into text",
            "link": "Leave as links",
            "strip": "Remove links",
        })
            .setValue(this.plugin.settings.linkStrippingBehaviour)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.linkStrippingBehaviour = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Show Pandoc command line interface commands")
            .setDesc("Doesn't apply to HTML exports. Using the CLI will have slightly different results due to how this plugin works.")
            .addToggle(toggle => toggle
            .setValue(this.plugin.settings.showCLICommands)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.showCLICommands = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("Pandoc path")
            .setDesc("Optional override for Pandoc's path if you have command not found issues. On Mac/Linux use the output of 'which pandoc' in a terminal; on Windows use the output of 'Get-Command pandoc' in powershell.")
            .addText(text => text
            .setPlaceholder('pandoc')
            .setValue(this.plugin.settings.pandoc)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.pandoc = value;
            yield this.plugin.saveSettings();
        })));
        new obsidian.Setting(containerEl)
            .setName("PDFLaTeX path")
            .setDesc("Optional override for pdflatex's path. Same as above but with 'which pdflatex'")
            .addText(text => text
            .setPlaceholder('pdflatex')
            .setValue(this.plugin.settings.pdflatex)
            .onChange((value) => __awaiter(this, void 0, void 0, function* () {
            this.plugin.settings.pdflatex = value;
            yield this.plugin.saveSettings();
        })));
    }
}

const DEFAULT_SETTINGS = {
    showCLICommands: false,
    addExtensionsToInternalLinks: 'html',
    injectMathJaxCSS: true,
    injectAppCSS: true,
    injectPluginCSS: true,
    customCSSFile: null,
    displayYAMLFrontmatter: false,
    linkStrippingBehaviour: 'text',
    highDPIDiagrams: true,
    pandoc: null,
    pdflatex: null,
};
function replaceFileExtension(file, ext) {
    // Source: https://stackoverflow.com/a/5953384/4642943
    let pos = file.lastIndexOf('.');
    return file.substr(0, pos < 0 ? file.length : pos) + '.' + ext;
}

/*
 * main.ts
 *
 * Initialises the plugin, adds command palette options, adds the settings UI
 * Markdown processing is done in renderer.ts and Pandoc invocation in pandoc.ts
 *
 */
class PandocPlugin extends obsidian.Plugin {
    constructor() {
        super(...arguments);
        this.features = {};
    }
    onload() {
        return __awaiter(this, void 0, void 0, function* () {
            console.log('Loading Pandoc plugin');
            yield this.loadSettings();
            // Check if Pandoc, LaTeX, etc. are installed and in the PATH
            yield this.createBinaryMap();
            // Register all of the command palette entries
            this.registerCommands();
            this.addSettingTab(new PandocPluginSettingTab(this.app, this));
        });
    }
    registerCommands() {
        for (let [prettyName, pandocFormat, extension, shortName] of outputFormats) {
            if (needsLaTeX(pandocFormat)
                && !this.features['pdflatex'])
                continue;
            const name = 'Export as ' + prettyName;
            this.addCommand({
                id: 'pandoc-export-' + pandocFormat, name,
                checkCallback: (checking) => {
                    let leaf = this.app.workspace.activeLeaf;
                    if (!leaf)
                        return false;
                    if (!this.features.pandoc && pandocFormat !== 'html')
                        return false;
                    if (!this.currentFileCanBeExported())
                        return false;
                    if (!checking) {
                        this.startPandocExport(this.getCurrentFile(), pandocFormat, extension, shortName);
                    }
                    return true;
                }
            });
        }
    }
    vaultBasePath() {
        return this.app.vault.adapter.getBasePath();
    }
    getCurrentFile() {
        const fileData = this.app.workspace.getActiveFile();
        if (!fileData)
            return null;
        const { basename, extension } = fileData;
        const filename = `${basename}.${extension}`;
        return path__namespace.join(this.vaultBasePath(), filename);
    }
    currentFileCanBeExported() {
        const file = this.getCurrentFile();
        if (!file)
            return false;
        for (const ext of inputExtensions) {
            if (file.endsWith(ext))
                return true;
        }
        return false;
    }
    createBinaryMap() {
        return __awaiter(this, void 0, void 0, function* () {
            this.features['pandoc'] = this.settings.pandoc || (yield lib.lookpath('pandoc'));
            this.features['pdflatex'] = this.settings.pdflatex || (yield lib.lookpath('pdflatex'));
        });
    }
    startPandocExport(inputFile, format, extension, shortName) {
        return __awaiter(this, void 0, void 0, function* () {
            new obsidian.Notice(`Exporting ${inputFile} to ${shortName}`);
            // Instead of using Pandoc to process the raw Markdown, we use Obsidian's
            // internal markdown renderer, and process the HTML it generates instead.
            // This allows us to more easily deal with Obsidian specific Markdown syntax.
            try {
                const markdown = this.app.workspace.activeLeaf.view.data;
                const { html, title } = yield render(this.settings, markdown, inputFile, this.vaultBasePath(), format);
                const outputFile = replaceFileExtension(inputFile, extension);
                if (format === 'html') {
                    // Write to HTML file
                    yield fs__namespace.promises.writeFile(outputFile, html);
                    new obsidian.Notice('Successfully exported via Pandoc to ' + outputFile);
                }
                else {
                    // Spawn Pandoc
                    const { error, command } = yield pandoc({ file: 'STDIN', contents: html, format: 'html', title,
                        pandoc: this.settings.pandoc, pdflatex: this.settings.pdflatex }, { file: outputFile, format });
                    // Never give warnings for plain-text exports
                    if (error.length && format !== 'plain') {
                        new obsidian.Notice('Exported via Pandoc to ' + outputFile + ' with warnings');
                        new obsidian.Notice('Pandoc warnings:' + error, 10000);
                    }
                    else {
                        new obsidian.Notice('Successfully exported via Pandoc to ' + outputFile);
                    }
                    if (this.settings.showCLICommands) {
                        new obsidian.Notice('Pandoc command: ' + command, 10000);
                    }
                }
            }
            catch (e) {
                new obsidian.Notice('Pandoc export failed: ' + e.toString(), 15000);
                console.error(e);
            }
        });
    }
    onunload() {
        console.log('Unloading Pandoc plugin');
    }
    loadSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            this.settings = Object.assign({}, DEFAULT_SETTINGS, yield this.loadData());
        });
    }
    saveSettings() {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.saveData(this.settings);
        });
    }
}

module.exports = PandocPlugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
